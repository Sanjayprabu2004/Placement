
ARRAY IN Hackerrank

CODE 1

import java.util.*;

public class ArrayPrinter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int[] arr = new int[a];
        for (int i = 0; i < a; i++)
        {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < a; i++)
        {
            System.out.print(arr[i]);
            if (i < a - 1) 
            {
                System.out.print(" ");
            }
        }
    }
}






CODE 2



import java.util.*;
public class OddEvenCounter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        int oddCount = 0;
        int evenCount = 0;
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
            if (arr[i] % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
        System.out.println("Odd = " + oddCount);
        System.out.println("Even = " + evenCount);
    }
}



CODE 3



import java.util.*;
public class ReverseArrayPrinter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = n - 1; i >= 0; i--) {
            System.out.print(arr[i]);
            if (i > 0) {
                System.out.print(" ");
            }
        }
       scanner.close();
    }
}



CODE 4



import java.util.*;
public class ArraySum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
            sum += arr[i];
        }
        System.out.println(sum);
    }
}

CODE 5 

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            int temp = arr[i];
            arr[i] = sum;
            sum += temp;
        }
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}



CODE 8

import java.util.Scanner;
public class Main {
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) 
        {
            arr[i] = sc.nextInt();
        }
        for(int i = 0; i < n; i++) {
            int sum = 0;
            for(int j = i + 1; j < n; j++)
            {
                sum += arr[j];
            }
            arr[i] = sum;
        }
        for(int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}




27.06.2025




code 1





public class Main
 {
        public int fun()
        {
            system.out.prinyt("hiiiiiii");
            return 100;
        }
        public static void main (String[] args)
        {
            main m =new main();
            student s= new student();
            int ans=m,fun;
            System.out.print(ans);
        }
    }


second class code


public class Main
 {
        public int fun()
        {
            system.out.prinyt("hiiiiiii");
            return 100;
        }
        public static void main (String[] args)
        {
            main m =new main();
            student s= new student();
            int ans=m,fun;
            System.out.print(ans);
        }
    }



code 2
link batch 4


rules for creating java constructor

1. constructor name must be same as the class name
2. constructor must have no explisit return type
3. java constructor cannot be abstract,static, final and synchronized







import java.util.*;
public class Main
{
	public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	int size = sc.nextInt();
	int []a = new int[size];
	int i,j,max = 0,sum=0;
	for(i=0;i<size;i++)
	{
	   a[i] = sc.nextInt();   
	}
	
	max = 0 ;
for(i=0;i<size;i++)
{
    for(j=i;j<size;j++)
    {
        sum = sum + a[j];
        if(max < sum)
        {
            max = sum;
        }
    }
    sum = 0;
}

System.out.println(max);
	
	
	}
}




/*
6

1 -3 4 2 -4 5

1 -3 4 2 -4 5   =   5 
4 2 -4 5        = 7 
max = 5 
max = 0 
for(i=0;i<s;i++)
{
    for(j=i;j<s;j++)
    {
        sum = sum + a[j];
        if(max < sum)
        {
            max = sum;
        }
    }
    sum = 0;
}

7
0 1  2 3 4  5 6 
4 3 -6 7 4 -1 2

4 = 4 
4 3  = 7
4 3 -6 = 1 
4 3 -6 7 = 8 
4 3 -6 7 4 = 12 
4 3 -6 7 4 -1 = 11 
4 3 -6 7 4 -12 = 13 



 3  = 3
 3 -6 = -3 
 3 -6 7 = 4 
 3 -6 7 4 = 8 
 3 -6 7 4 -1 = 7 
 3 -6 7 4 -1 2 = 9 








28.062025

Java Inheritance



new class from a existing class

subclass 
superclass

1.Single Inheritance

Class A


2. multilevel Inheritance

class A
|
|
class B
|
|
Class c


3.Hierarchial Inheritance


              ______Class A_______
                |          |
             Class B      Class C




4.Multi Inheritance


5.Hybrid Inheritance

class Animal
{
void eat(
{
System.out.println("eating");
}
void sleep(
{
System.out.println("sleeping");
}
}
 class Human extends Mokey
{
void read()
{
System.out.println("reading");
}








achieving polymorphism in java :

1.method overloading
2.method overriding
3.Operator overloading


@ override

   


Java Encapsulation





bundling of fields and methods

Data Hiding
   - can use access modifiers to achieve data handling









